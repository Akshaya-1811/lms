pipeline {
   agent any

    stages {
        stage('Sonar Analysis') {
            steps {
                echo 'Testing..'
                sh 'cd api && sudo docker run  --rm -e SONAR_HOST_URL="http://65.1.132.50:9000" -e SONAR_LOGIN="sqp_23db14aac1a6abdbb26d03f66c2a161eef6b52ea"  -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms'
            }
        }

        stage('Build LMS') {
            steps {
                echo 'Building..'
                sh 'cd api && npm install && npm run build'
            }
        }

        stage('Release LMS') {
            steps {
                script {
                    echo "Releasing.."       
                    def packageJSON = readJSON file: 'webapp/package.json'
                    def packageJSONVersion = packageJSON.version
                    echo "${packageJSONVersion}"  
                    sh "zip webapp/dist-${packageJSONVersion}.zip -r webapp/dist"
                    sh "curl -v -u admin:amkamk3@ --upload-file webapp/dist-${packageJSONVersion}.zip http://65.1.132.50:8081/repository/lmsfe/"     
            }
            }
        }
      stage('Docker Build') {	
        steps {
            sh 'cd api && docker build -t muralialakuntla3/api .'
              }
        }
        stage('Docker remove container') {	
        steps {
            sh 'docker container rm -f api2'
        }
        }
        stage('Docker run container') {	
        steps {
            sh 'docker container run -dt --name api2 -p 3000:3000 muralialakuntla3/api'
        }
        }
   
        stage('Docker Login') {	
        steps {

            sh 'echo $dockerhub_PSW | docker login -u $dockerhub_USR --password-stdin'
              }
        } 
        stage('Docker Push') {	
        steps {

            sh 'docker push muralialakuntla3/api'
            
        }
        }
        stage('Remove old docker images') {
             steps {
                 sh 'docker rmi -f muralialakuntla3/api'
            }
        }
         stage('creating database container') {
             steps {

                 sh 'docker container rm --force lmsdb'
                 sh 'docker run -d -p 5432:5432 --network lms-appnetwork -e  POSTGRES_PASSWORD=password --name lmsdb postgres'
            }
        }
         stage('Running the docker container') {
            steps {
                  sh 'docker container rm --force api2'
                  sh 'docker run -d -p 3000:3000 --network lms-appnetwork -e DATABASE_URL=postgresql://postgres:password@lmsdb:5432/postgres --name api2 -e PORT=3000 -e MODE=local  muralialakuntla3/api'
            }
        }
    }
}
